{"version":3,"sources":["Dcard/Components/Post.jsx","Dcard/Components/ReaderModal.jsx","Dcard/Dcard.jsx","App.js","serviceWorker.js","index.js"],"names":["Post","props","state","post","data","this","className","onClick","openReaderModal","id","title","excerpt","Component","ReaderModal","readerModal","backgroundClass","isOpened","readerClass","content","closeReaderModal","split","map","line","i","key","Dcard","bind","myref","React","createRef","posts","postsDisplayed","postId","intersectionObserver","IntersectionObserver","entries","intersectionRatio","setState","observe","current","fetch","then","res","json","isLoaded","document","body","style","overflow","overflowY","slice","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58aefe48.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Post.css\";\r\n\r\nexport default class Post extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: this.props.data,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let post = this.state.post;\r\n\r\n        return (\r\n            <article className=\"post-container\">\r\n                <div\r\n                    className=\"content-container\"\r\n                    onClick={() => this.props.openReaderModal(post.id)}\r\n                >\r\n                    <div className=\"title\">{post.title}</div>\r\n                    <div className=\"excerpt\">{post.excerpt}</div>\r\n                </div>\r\n            </article>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./ReaderModal.css\";\r\n\r\nexport default class ReaderModal extends Component {\r\n    render() {\r\n        let readerModal = this.props.readerModal;\r\n        //adding hidden class to modal if it's not opened\r\n        let backgroundClass =\r\n            \"reader-background \" + (!readerModal.isOpened ? \"hidden\" : \"\");\r\n        let readerClass =\r\n            \"post-reader \" + (!readerModal.isOpened ? \"hidden\" : \"\");\r\n        //only assign title and content when the modal is opened to avoid undefined\r\n        let title = readerModal.isOpened ? readerModal.title : \"\";\r\n        let content = readerModal.isOpened ? readerModal.content : \"\";\r\n\r\n        return (\r\n            <div className=\"reader-container\">\r\n                <div\r\n                    className={backgroundClass}\r\n                    onClick={() => this.props.closeReaderModal()}\r\n                ></div>\r\n                <div className={readerClass}>\r\n                    <div className=\"reader-title\">{title}</div>\r\n                    <div className=\"reader-content\">\r\n                        {content.split(\"\\n\").map((line, i) => {\r\n                            return <p key={i}>{line}</p>;\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Post from \"./Components/Post\";\r\nimport ReaderModal from \"./Components/ReaderModal\";\r\nimport \"./Dcard.css\";\r\n\r\nexport default class Dcard extends Component {\r\n    //declaration\r\n    myref;\r\n    intersectionObserver;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //binding functions\r\n        this.openReaderModal = this.openReaderModal.bind(this);\r\n        this.closeReaderModal = this.closeReaderModal.bind(this);\r\n        //creating reference to perform infinite scroll\r\n        this.myref = React.createRef();\r\n        this.state = {\r\n            posts: [],\r\n            postsDisplayed: 6,\r\n            readerModal: {\r\n                isOpened: false,\r\n                postId: 0,\r\n                title: \"\",\r\n                content: \"\",\r\n            },\r\n        };\r\n\r\n        this.intersectionObserver = new IntersectionObserver((entries) => {\r\n            let ratio = entries[0].intersectionRatio;\r\n            //ratio will be 1 when scrollng to buttom\r\n            if (ratio > 0)\r\n                this.setState({\r\n                    postsDisplayed: this.state.postsDisplayed + 4,\r\n                });\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intersectionObserver.observe(this.myref.current);\r\n        //fetching data only once at the beginning\r\n        fetch(\"https://www.dcard.tw/_apicors/posts?popular=true\")\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    posts: json,\r\n                });\r\n            });\r\n    }\r\n\r\n    openReaderModal(id) {\r\n        //fectching post data from API\r\n        fetch(`https://www.dcard.tw/_apicors/posts/${id}`)\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                this.setState({\r\n                    readerModal: {\r\n                        isOpened: true,\r\n                        postId: json.id,\r\n                        title: json.title,\r\n                        content: json.content,\r\n                    },\r\n                });\r\n            });\r\n        //when modal is shown, disable scrolling on body\r\n        document.body.style.overflow = \"hidden\";\r\n    }\r\n\r\n    closeReaderModal() {\r\n        document.body.style.overflowY = \"scroll\";\r\n        this.setState({ readerModal: { isOpened: false } });\r\n    }\r\n\r\n    render() {\r\n        //getting specific number of posts depending on how much the user scrolled\r\n        let posts = this.state.posts.slice(0, this.state.postsDisplayed);\r\n        let readerModal = this.state.readerModal;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"postsList-container\">\r\n                    {posts.map((post) => (\r\n                        <Post\r\n                            key={post.id}\r\n                            data={post}\r\n                            openReaderModal={this.openReaderModal}\r\n                        ></Post>\r\n                    ))}\r\n                </div>\r\n                <ReaderModal\r\n                    key={readerModal.postId}\r\n                    readerModal={readerModal}\r\n                    closeReaderModal={this.closeReaderModal}\r\n                ></ReaderModal>\r\n                {/* ref guarantees to be updated before compoenentDidMount */}\r\n                <div ref={this.myref}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Dcard from './Dcard/Dcard'\n\nfunction App() {\n    return (\n        <Dcard />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}